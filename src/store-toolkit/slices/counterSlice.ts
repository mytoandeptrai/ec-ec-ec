/**
 * ƒê·∫ßu ti√™n ƒë·ªÉ kh·ªüi t·∫°o 1 slice, m√¨nh s·∫Ω d√πng h√†m createSlice({})
 * Nh·∫≠n v√†o l√† 1 object g·ªìm c√°c thu·ªôc t√≠nh:
 * name: t√™n c·ªßa slice => redux toolkit ph√¢n bi·ªát gi·ªØa nh·ªØng slice v·ªõi nhau.
 * initialState: gi√° tr·ªã ban ƒë·∫ßu c·ªßa slice
 * reducers: object g√¨ m·ªôt h√†m t√™n reducer m√† m√¨nh mu·ªën g·ªçi khi trigger action
 * extra reducer: object v√† d√πng khi s·ª≠ d·ª•ng createAsyncThunk g·ªçi API v·ªõi redux toolkit
 */

import { createSlice, PayloadAction } from "@reduxjs/toolkit";
const initialState = {
   count: 0,
   isLoading: false,
   data: [],
};

const counterSlice = createSlice({
   name: "counterSlice",
   initialState: initialState,
   reducers: {
      increase: (state, action: PayloadAction<number>) => {
         console.log("üöÄ ~ action:", action.payload);
         state.count = state.count + action.payload;
      },
      decrease: (state, action) => {
         state.count = state.count - action.payload;
      },
   },
});

/** Sau khi t·∫°o slice xong, m√¨nh c·∫ßn export c√°c function trong reducers ƒë·ªÉ s·ª≠ d·ª•ng:
 *  C√°ch vi·∫øt s·∫Ω l√† s·ª≠ d·ª•ng destructuring l·∫•y ra t·ª´ counterSlice.actions
 */

export const { decrease, increase } = counterSlice.actions;

/** Sau ƒë√≥ m√¨nh s·∫Ω ph·∫£i export reducer c·ªßa counterSlice ra
 * B·∫±ng vi·ªác s·ª≠ d·ª•ng counterSlice.reducer
 */

export default counterSlice.reducer;
